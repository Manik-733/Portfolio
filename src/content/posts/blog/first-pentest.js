export const post = {
  id: 3,
  title: "Decrypting Diaries 3: First Blood – My First Real Pentest",
  excerpt:
    "A step-by-step walkthrough of my first penetration test on Metasploitable 2 using Kali Linux — from reconnaissance to root access and persistent control.",
  date: "2025-04-21",
  readTime: "8 min",
  tags: ["security", "breach"],
  image: "/api/placeholder/800/400",
  slug: "decrypting-diaries-3",
  content: `
  _by [Manik Singh](/)_  

They say you never forget your first root shell—and wow, they’re right.

This week, I rolled up my sleeves and did something I’ve been dreaming about for a while: I completed my first full-on penetration test. Using Kali Linux as my attacker machine, I went after Metasploitable 2—a purposely vulnerable system used for practice—and managed to go from curious hacker to full system control. It was thrilling, eye-opening, and honestly, way more fun than I expected.

Let me walk you through how it all went down, step by step. The language might get overwhelming, so apoligies in advance.

🔍 Phase 1: Recon — Getting the Lay of the Land
-----------------------------------------------

Every good pentest starts with reconnaissance—basically figuring out what you’re dealing with. I ran an Nmap scan to see which doors (aka ports) were open on the target system:

    nmap -sS -sV 192.168.x.x

This command told me about all the services running on the machine. One thing really stood out: a service called vsftpd 2.3.4. Sounds innocent, right? Except… this version is known to have a backdoor that literally gives you root access if you know how to ask nicely (well, kind of).

💥 Phase 2: Exploitation — The Smile That Opened a Shell
--------------------------------------------------------

I opened Metasploit (a tool that makes exploiting vulnerabilities feel like wizardry), picked the right exploit, set the target IP, and hit run. A few seconds later, boom:

    [*] UID: uid=0(root) gid=0(root)

Translation: I was in. As root. No password, no alert, nothing. Just like that, I had full control over the system.

That feeling? Pure hacker joy.

🛠️ Phase 3: Persistence — Because One-Time Access Isn’t Enough
---------------------------------------------------------------

Now that I had control, I didn’t want to lose it. So, I created a new user called "evil" (yes, I know, not the most subtle name) and gave it full admin powers:

    useradd evil
    passwd evil
    echo 'evil ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

With this setup, I could log in any time using SSH, no questions asked. Even if the system rebooted, I’d still be able to get back in. That’s what we call persistence.

🔐 Phase 4: The Loot — Cracking Passwords Like a Pro
----------------------------------------------------

With root access, I peeked into the /etc/shadow file—a place where password hashes for all users live. Then I handed it over to John the Ripper, a password cracking tool with a name straight out of a thriller movie.

    john shadow.txt --wordlist=/usr/share/wordlists/rockyou.txt

A few minutes later, I had cracked a handful of weak passwords:

- klog: 123456789
- sys: batman
- service: service
- evil: evil

Let’s just say... some people really need to up their password game.

📌 Final Thoughts: It’s More Than Just Shells
---------------------------------------------

This wasn’t just about hacking a box. It was about understanding systems, thinking like an attacker, and realizing how one overlooked misconfiguration can lead to total compromise.

What stood out the most? Enumeration is everything. One scan led to one exploit, which led to total control.

I’ve read countless write-ups—now I’ve got my own. And this is just the beginning.

👀 Next up? Maybe trying to pivot through the network. Or exploring how to escalate privileges in a real-world scenario.

Until then — I take my leave.
For further insights and more blogs like this, visit [Manik Singh's Portfolio](/) or connect on [LinkedIn](https://linkedin.com/in/manik-singh-62b236298).

Happy Decrypting!
  `,
};
